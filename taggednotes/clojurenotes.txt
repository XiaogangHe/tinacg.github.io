The Clojure Way
clojure
8 apr 2015, Joy 2nd, p. xxvii

Leave all programming baggage behind

ability to create little languages
--
Clojure features
clojure
13 apr 2015, Joy 2nd, p. 3

avoid complications of managing state

being a Lisp, it can manipulate data and code uniformly: as lists
--
McCarthy Lisp core
lisp, core
13 apr 2015, Joy 2nd, p. 9

seven functions and two special forms:

atom, car, cdr, cons, eq, quote, label
cond, lambda
--
Notion of state
state, time, identity
13 apr 2015, Joy 2nd, p. 17

Time refers to relative moments when events occur.
An entity's properties over time forms its identity.
At any given time, a snapshot, or state, can be taken.
This state is immutable, as a manifestation of its properties at a given
moment in time.

As an example, Clojure represents an entity as a flipbook.
The whole book is the identity. Changing the illustration is adding a
picture to the book, and flipping the pages represents states over time.

In contrast, a mutable picture conflates state and identity. Rather than
adding pictures to a flipbook, parts of the mutable picture are erased
and redrawn.
--
Functional programming and mathematics
functional programming
13 apr 2015, Joy 2nd, p. 24

Mathematics view little, if anything, as objects. It is built on the
relationships between one set of elements and another through the
application of functions.
--
Valid expressions
expressions
13 apr 2015, Joy 2nd, p. 26
Valid Clojure expressions accepted by the REPL are:

numbers, symbols, keywords, Booleans, characters, strings, functions,
function calls, macros, literal maps, vectors, queues, records, and sets.

Numbers, strings, and keywords are self-evaluating.

Comments are indicated by a semicolon (or more)  ; my comment
--
Scalars
scalars, data types
13 apr 2015, Joy 2nd, p. 26

Scalars are the base data types, including integers, floats, rationals,
symbols, keywords, strings, characters, Booleans, and regex patterns.
--
Integers
integers, data types
13 apr 2015, Joy 2nd, p. 27

The size of integers is limited by the available memory.
Integers are Java longs up to its limit. Larger integers are BigInts,
and printed with a trailing N.

adding (+ 1 2N) results in 3N

binary, octal, and hex are written as 2r1001, 0177, and 0x7f.
integers in arbitrary radices are written as 17r80g.
--
Floats
floats, data types
13 apr 2015, Joy 2nd, p. 27-28

floats can be written in exponential form.

Arbitrary precision floats have a trailing M.

adding (+ 1.1 2.2M) results in 3.3.
To preserve precision, both arguments must be M
--
Rationals
rationals, data types
13 apr 2015, Joy 2nd, p. 28

Rational numbers are a precise representation, written as an integer
over another: 3/2. They are automatically simplified. They do not print N
--
Symbols
symbols, data types
13 apr 2015, Joy 2nd, p. 28, 41

Symbols are objects in their own right but mostly used to represent
another value:

(def rational-pi 22/7)

Evaluating a symbol returns whatever value the symbol is referring to
in the current context. Typical uses of symbols are to refer to function
parameters, local variables, globals, and Java classes.

If a symbol begins with a namespace and a slash, it is a qualified symbol
--
Keywords
keywords, data types
13 apr 2015, Joy 2nd, p. 28

Keywords always evaluate to themselves.
They are written as <b>:MySymbolName</b>
--
Strings
strings, data types
13 apr 2015, Joy 2nd, p. 29

Strings are written inside double quotes, and may include newlines as
part of the literal.

"abc
def"

"he said \"hello\""
--
Characters
characters, data types
13 apr 2015, Joy 2nd, p. 29

Characters are written with a literal syntax and are stored as Java
Characters. \a, \u30DE, and \space are some examples.
--
Collections
collections
13 apr 2015, Joy 2nd, p. 29

Collections include lists, vectors, maps, and sets
--
Lists
lists, collections
13 apr 2015, Joy 2nd, p. 29

Literal lists are written with parentheses.

When evaluating a list, the first item is resolved to a function, macro,
or special operator. If it is a function, the remaining items are
evaluated in order, and passed as function parameters. Macros and special
operators have specific processing rules.

Lists can contain items of any type.
The empty list, (), is <b>not</b> the same as nil.
--
Forms
forms, objects, special forms
13 apr 2015, Joy 2nd, p. 29, 32

A form is any object meant to be evaluated, such as lists, vectors, maps,
numbers, keywords, and symbols.

A special form has special syntax or special evaluation rules. An example
is the dot operator for Java interoperability.

A special form is part of the core language, but not created in terms of
functions, types, or macros.
--
Vectors
vectors, collections
13 apr 2015, Joy 2nd, p. 30

The literal syntax for vectors uses square brackets [1 2 :c]

Vectors evaluate each item in order. No function or macro call is done
on the vector itself, although if a list is inside the vector, that list
is evaluated with normal rules for a list.

The empty vector, [], is not the same as nil.

A vector, like scalars and maps, evaluates to itself.
--
Maps
maps, collections
13 apr 2015, Joy 2nd, p. 30

Maps store unique keys and one value per key. They are similar to hashes
or dictionaries in other languages.

There are several types of maps with different properties.

The literal syntax is curly braces with alternating keys and values.
Commas are considered whitespace (they are optional, but frequently used)

{1 "one", 2 "two", 3 "three"}

Keys and values are evaluated before the result is stored in the map.
The order in which the elements are evaluated is not guaranteed.

The empty map, {}, is not the same as nil.

A map, like a vector or scalar, evaluates to itself.
--
Sets
sets, collections
13 apr 2015, Joy 2nd, p. 30

Sets store zero or more unique items. The literal syntax is curly braces
with a leading hash #{1 2 "three}

The empty set, #{}, is not the same as nil.
--
Function properties
functions
13 apr 2015, Joy 2nd, p. 31

Functions are a first-class type, meaning they can be used the same as
any value. They can be stored in vars (with def), held in lists and
other collections, passed as arguments to other functions, and returned
as the result of other functions.
--
Vars
vars
13 apr 2015, Joy 2nd, p. 31

The closest analogy to other languages' variables is the <i>var</i>.

A var is named by a symbol and holds a single value. It may be shadowed
by function parameters and locals.

The most common way to create vars is with <b>def</b>
(def x 17)
--
Anonymous functions
anonymous functions, functions
14 apr 2015, Joy 2nd, p. 32

An anonymous function can be defined using the <b>fn</b> special form.

(fn [x y]
    (println "making a set")
    #{x y})

The anonymous function can be called by making it the first item of a list

((fn [x y]
     (println "making a set")
     #{x y})
 1 2)
--
The special form, def
def, special forms
14 apr 2015, Joy 2nd, p. 33

The def special form assigns a symbolic name to a piece of data.
Because functions are first class, they are equal citizens with data.

To associate a name with a function:

(def make-set
    (fn [x y]
        (println "making a set")
        #{x y}))

and the newly defined name can be called, (make-set 1 2)
--
The defn macro
defn, arity, overloading
14 apr 2015, Joy 2nd, p. 33

defn defines a function more concisely than def. It also provides a way
to add a documentation string, and allows for arity overloading.

(defn make-set
    "(optional doc string) Takes two values and makes a set"
  [x y]
  #{x y})

Arity refers to the differences in the argument count that a function
will accept.

You can have any number of argument/body pairs

(defn make-set-varargs
    "doc string for make set varargs"
  ([x] #{x})
  ([x y] #{x y}))
--
Varargs with &
varargs, functions
14 apr 2015, Joy 2nd, p. 34

To denote variable arguments, the & symbol is used in the argument list.
Arguments before the & symbol are bound one for one, and the remaining
arguments are collected in a sequence bound to the symbol after the &

(defn arity2+ [first second & more]
      (vector first second more))
--
In-place function definition shorthand
functions, shorthand, reader features
14 apr 2015, Joy 2nd, p. 34-35

#() is a reader feature that is shorthand notation for <b>fn</b>.

Arguments are implicitly declared through special symbols prefixed with %

(def make-list2+ #(list %1 %2 %&))

% is the same as %1, but %1 is preferred. %& denotes variable arguments.
--
Treat a block of expressions as one with do
do, block, forms
14 apr 2015, Joy 2nd, p. 35

Placing a block of expressions inside a <b>do</b> form will treat them
as one, but only the last one is returned. Do is typically used for the
purpose of creating side effects.
--
Create locals with let
locals, let, destructuring
14 apr 2015, Joy 2nd, p. 35-36

Locals are not local variables because they can't vary. They are created
with a let form, which starts with a vector defining the bindings,
followed by any number of expressions in the body.

The vector consists of pairs of a binding form that is usually a symbol,
but can be a destructuring form, and the expression whose value is bound
to this new local.

A previously defined local may be used when defining new locals.

The body is described as an implicit do. Only the last value is returned.

(let [r 5
     pi 3.14
     r-squared (* r r)]
     (println "radius is" r)
     (* pi r-squared))
--
Tail recursion with recur
recur, recursion, tail recursion
14 apr 2015, Joy 2nd, p. 36-37

recur will return to the top of the function and rebind the argument to
a new value. If the function has multiple arguments, the recur call must
as well, just like calling the function by name.

Arguments are first evaluated in order, then bound to the function
arguments simultaneously.

(defn print-down-from [x]
  (when (pos? x)
    (println x)
    (recur (dec x))))

(defn sum-down-from [sum x]
      (if (pos? x)
          (recur (+ sum x) (dec x))
          sum))
--
When to use when
when, conditionals
14 apr 2015, Joy 2nd, p. 38

Use when in these cases:

- There is no <b>else</b> part associated with the conditional
- You require an implicit do to perform side effects.
--
Loop and recur
loop, recur
14 apr 2015, Joy 2nd, p. 38

loop acts exactly like let, but also acts as a target for recur to jump
back to.

recur will always jump back to the closest enclosing loop or fn. Upon the
jump, the loop locals are re-bound to the values given in recur.

(defn sum-down-from [initial-x]
  (loop [sum 0, x initial-x]
     (if (pos? x)
         (recur (+ sum x) (dec x))
         sum)))
--
Tail position
tail position
14 apr 2015, Joy 2nd, p. 38

An expression is in the tail position of an expression when its value
may be the return value of the entire expression.

(defn absolute-value [x]
  (if (pos? x)
      x  ; then
      (- x)))  ; else

the if, x (then) and (- x) (else) are all in a tail position because they
may all be the return value of the entire function.

the lone x in the else clause is not in a tail position because it is not
returned directly, only after (-) is applied to it.
--
Quote and syntax-quote
quote, syntax-quote, unquote, unquote-splicing
14 apr 2015, Joy 2nd, p. 39-42

quote is a special operator, but using it is like calling a function.
It is placed as the first item of a list, or written as ' in front of a
list

(quote age)

The quote special operator prevents its argument from being evaluated at
all. It prevents arbitrarily complex structures from being evaluated.

The common use of quote is to use a literal list as a data collection.

The empty list, (), does not need to be quoted.

Syntax-quoting is written as a single back-quote `. It has extra features
that aid in constructing collections to be used as code.

Syntax-quoting will automatically qualify unqualified symbols, using the
current namespace if one doesn't already exist.

Inside a syntax-quoted form, unquoting a subform with ~ will evaluate it

Unquote-splicing with ~@ will evaluate the subform, then unpack the
resulting sequence and splicing it rather than inserting it as a nested
list.
--
Auto-gensym
gensym, auto-gensym
14 apr 2015, Joy 2nd, p. 42

Inside a syntax-quote, appending a # to the end of a symbol name creates
a new, unique symbol name.

`myvar#
;;=> myvar__152__auto__
--
Accessing Java static class members
java, interop, static
14 apr 2015, Joy 2nd, p. 43

accesing static class members is like accessing a namespace-qualified
var:

java.util.Locale/JAPAN

(Math/sqrt 81)
--
Create new Java instances with a dot at the end of class name
java, interop, instances
14 apr 2015, Joy 2nd, p. 43-44

The special operator new creates an instace of the given class name with
the given parameters:

(new java.awt.Point 0 1)

Clojure core collection types can be used as arguments to Java
constructors for the purpose of initialization:

(new java.util.HashMap {"a" 1 "b" 2})

The preferred way of creating instances is to add a dot after the class
name: (java.util.HashMap. {"a" 1})
--
Accessing instance members
java, interop, instances
14 apr 2015, Joy 2nd, p. 44

To access public instance variables, precede the field name with .-

(.-x (java.awt.Point. 10 20))

To access instance methods, the method name comes after a dot and the
instance you're accessing is explicitly given as the first argument to
the method call.

(.divide (java.math.BigDecimal. "42") 2M)
--
Setting instance fields
java, interop, instances
14 apr 2015, Joy 2nd, p. 44

Instance fields are set with the function set!

(let [origin (java.awt.Point. 0 0)]
     (set! (.-x origin) 15)
     (str origin))
--
The .. macro
macros, .., chain
14 apr 2015, Joy 2nd, p. 45-46

A chain of Java method calls is a sequence where a method uses the return
type of the previous method call, such as

new java.util.Date().toString().endsWith("2001");

which is equivalent to (.endsWith (.toString (java.util.Date.)) "2001")

but is difficult to read. With the .. macro, the above becomes

(.. (java.util.Date.) toString (endsWith "2001"))

However, .. is not used very much in practice outside of macro
definitions. The macros -> and ->> are used in a similar manner and are
also useful in non-interop situations.
--
The doto macro
macros, java, interop
14 apr 2015, Joy 2nd, p. 45

The doto macro is used when calling a set of mutators to a fresh instance

(doto (java.util.HashMap.)
      (.put "HOME" "/home")
      (.put "SRC" "/src")
      (.put "BIN" "/usr/bin"))
--
Throwing and catching
exceptions
14 apr 2015, Joy 2nd, p. 46

Throwing and catching is similar to Java

(throw (Exception. "This is throwed"))

(try
 (f)
 (catch ArithmeticException ae "no dividing by zero")
 (catch Exception e (str "exception " (.getMessage e)))
 (finally (println "returning")))
--
Creating a namespace
namespaces, ns
14 apr 2015, Joy 2nd, p. 47

Create and switch to namespaces with the ns macro:
(ns joy.ch2)

the *ns* var refers to the current namespace.
--
Loading other namespaces with :require
namespaces, directives, require
14 apr 2015, Joy 2nd, p. 48

As part of the ns macro, :require will load a namespace.
The :as directive will create an alias

(ns joy.req
    (:require [clojure.set :as s]))

(s/intersection #{1 2 3} #{3 4 5})

superficially, using a namespaced function looks like a call to a static
method, but the namespace symbol is used only as a qualifier. The class
symbol references the class itself.
--
Loading and creating mappings in your own namespace with :refer
namespaces, directives, refer
14 apr 2015, Joy 2nd, p. 48-49

To avoid having to call symbols by their qualified names, use the
:refer option of the :require directive.

(ns joy.use-ex
    (:require [clojure.string :refer (capitalize)]))
(map capitalize ["joe" "trout"])

:refer :all brings in all the public vars from the given namespace, but
is not recommended practice.
--
Create mappings with :refer
namespaces, directives, refer
14 apr 2015, Joy 2nd, p. 49

:refer, when used as a directive of ns, works almost exactly like the
option given in the :require directive, except that it only creates
mappings for libraries that have already been loaded.

(ns joy.yet-another
    (:refer joy.ch2))
--
Renaming references and required names
namespaces, directives, rename
14 apr 2015, Joy 2nd, p. 49

The :rename keyword sets up aliases, taking a map. It may be used with
:refer and :require

(ns joy.yet-another
    (:refer clojure.set :rename {union onion}))
--
Importing Java classes
namespaces, java, import
14 apr 2015, Joy 2nd, p. 49

To use unqualified Java classes, import them with the :import directive

(ns joy.java
    (:import [java.util HashMap]
             [java.util.concurrent.atomic AtomicLong]))

(HashMap. {"happy?" true})

java.lang classes are automatically imported
--
Truthiness
truthiness, if
14 apr 2015, Joy 2nd, p. 52

Forms that expect booleans are all macros built on top of if.

Every value has a "true" value except for false and nil. This means that
zero, '', (), and so on are all considered true.
--
Boolean object instances are truthy
truthiness, booleans, false
14 apr 2015, Joy 2nd, p. 53

Clojure's true and false are the same as Java's Boolean/TRUE and FALSE.

Creating an instance of a Boolean "false" will be considered true by if.

(def evil-false (Boolean. "false"))  ; never do this

The correct way to parse a "false" string is (Boolean/valueOf "false")

The correct way to check for false is (false? x)
--
Checking for nil and false
nil, false
14 apr 2015, Joy 2nd, p. 53

If it is necessary to check for nil and false, use nil? and false?
--
Checking for an empty collection with seq
collections, nil, empty, seq
14 apr 2015, Joy 2nd, p. 53-54

(seq x) will return nil if the collection is empty. It is used for testing
for termination, instead of (when-not (empty? s) ...)

(when (seq s)
  (prn (first s))
  (recur (rest s)))

since seq is being used in each iteration, rest should be used instead of
next. rest can return both empty and non-empty sequences, while next is
(seq (rest s)), so it will return nil instead of an empty sequence.

Note: Although this example looks like it is constructing a new seq on
each loop iteration, it runs faster than equivalent code using "empty?"
--
Printing the last stack trace in the REPL
stack trace, repl, exception, debugging
14 apr 2015, from older notes

https://clojuredocs.org/clojure.core/use

(use '[clojure.stacktrace :only (e)])
(e)
--
Destructuring is positionally binding locals
destructuring, vector
15 apr 2015, Joy 2nd, p. 55

Destructuring allows you to place a collecttion of names in a binding form
where you'd normally put a single name.

The simplest kind of destructuring is picking apart a vector:

(let [[f-name m-name l-name] whole-name]
     (str l-name ", " f-name " " m-name))

Using an ampersand indicates that remaining values will be collected into a seq

(let [[a b c & more] (range 10)])

The entire collection can be bound to a local with :as.

(let [[a b c & more :as all] range-vec])

all will remain a vector, while 'more' is a seq.

Destructuring works for 'let' locals and in function parameters. The ampersand
inside function arguments is not part of destructuring. It is part of the
general support for multiple function bodies.
--
Destructuring with a map
destructuring, map
15 apr 2015, Joy 2nd, p. 57

If we wish to pull values from a map, a map of locals on the left obtaining
values of the keys to the right.

(def name-map {:f-name "Guy" :l-name "Steele"})
(let [{f-name :fname l-name :l-name} name-map])

To avoid this repetitive form, the directives :keys, :strs, and :syms can be
used, to indicate what kind of key is used in the target map.

(let [{:keys [f-name l-name]} name-map])

:as may also be used to keep the entire map.

The directive :or followed by a map provides default values:

(let [{:keys [title f-name],
     :or {title "Mr."}} name-map])

These map destructuring features also work on lists, used when functions accept
keyword arguments:

(whole-name :f-name "Guy" :l-name "Steele")
--
Associative destructuring
destructuring
15 apr 2015, Joy 2nd, p. 58-59

A vector can be defstructured by providing a map declaring local names as
indices into the vector:

(let [{first-thing 0, last-thing 3} [1 2 3 4]]
     [first-thing last-thing])  ; [1 4]
--
Searching documentation
doc, find-doc, help
15 apr 2015, Joy 2nd, p. 60

The find-doc function searches both function names and doc strings
--
For directives
for, directives, let, when
15 apr 2015, Joy 2nd, p. 61

In a for form, :let works with a binding vector. :when limits the elements
used to only those returning a truthy value in the expression
--
Last exception in the REPL
exception, debugging, repl, stack trace
15 apr 2015, Joy 2nd, p. 63

The last exception is stored in the *e variable.

(.printStackTrace *e) will print the stack trace.
--
